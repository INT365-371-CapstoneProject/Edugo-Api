name: Build and Deploy 

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          cd Backend_Edugo
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.PORT_DATABASE }}" >> .env
          echo "DB_NAME=edugo" >> .env
          echo "DB_OPTION=charset=utf8mb4&parseTime=True&loc=Local" >> .env
      - name: Login to Docker Hub
        run: |
          cd Backend_Edugo
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Crate DockerFile in ScirptData
        run: |
              cd ScirptData
              rm -rf Dockerfile || true
              echo "FROM mysql:8.0.33" > Dockerfile
              echo "ENV MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD}}" >> Dockerfile
              echo "ENV MYSQL_DATABASE=edugo" >> Dockerfile
              echo "ENV LANG en_US.UTF-8" >> Dockerfile
              echo "COPY ./db.sql /docker-entrypoint-initdb.d/" >> Dockerfile
              echo "COPY ./insert.sql /docker-entrypoint-initdb.d/" >> Dockerfile
              echo "COPY ./user.sql /docker-entrypoint-initdb.d/" >> Dockerfile
              echo "EXPOSE ${{ secrets.PORT_DATABASE}}" >> Dockerfile
              echo 'ENTRYPOINT ["docker-entrypoint.sh"]' >> Dockerfile
              echo 'CMD ["mysqld"]' >> Dockerfile
      - name: Build Docker Image MYSQL
        run: |
          cd ScirptData
          docker build -t tkneng/edugo-mysql .
      - name: Push Docker Image MYSQL
        run: |
          cd ScirptData
          docker push tkneng/edugo-mysql:latest
      - name: Build Docker Image Backend
        run: |
          cd Backend_Edugo
          docker build -t tkneng/go-backend .
      - name: Push Docker Image Backend
        run: |
          cd Backend_Edugo
          docker push tkneng/go-backend:latest
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Delete Old Container MYSQL
        run: docker rm -f mysql-container || true
      - name: Delete Old Container Backend
        run: docker rm -f go-backend-container || true
      - name: Delete Old Container Reverse Proxy
        run: docker rm -f reverse-proxy-container || true
      - name: Clear All Docker System
        run: docker system prune -f
      - name: Create Docker Network
        run: docker network create edugo-network || true
      - name: Pull Docker Image MYSQL
        run: docker pull tkneng/edugo-mysql:latest
      - name: Run Docker Container MYSQL
        run: docker run -d --network edugo-network -p 3306:3306 --restart unless-stopped --name mysql-container tkneng/edugo-mysql:latest
      - name: Pull Docker Image Backend
        run: docker pull tkneng/go-backend:latest
      - name: Run Docker Container Backend
        run: docker run -d --network edugo-network -p 8080:8080 --restart unless-stopped --name go-backend-container tkneng/go-backend:latest